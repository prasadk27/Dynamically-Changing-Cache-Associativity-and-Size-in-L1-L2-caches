#!/usr/bin/env perl

use strict;
use Getopt::Std;
use File::Basename;

my $Prog = basename($0);

sub usage() {
  print STDERR <<END;
usage: $Prog [-a] var-name

This reads text from standard input, and wraps it in a C string constant
(pointer) definition of the given variable name, printing to stdout.

-a: emit a text as a const char array and initialize the named pointer to that,
    instead of emitting a single string constant
END
  exit 1;
}

my $EmitCharArray;
my $VarName;
{
  my %opts;
  if (!getopts('a', \%opts)) { usage; }
  if ($opts{a}) { $EmitCharArray = 1; }
  if (($#ARGV + 1) != 1) { usage; }
  $VarName = shift @ARGV;
}


{
  my @all_lines = <STDIN>;
  my $str_len = 0;
  foreach my $line (@all_lines) { $str_len += length($line); }
  my $result = "";

  if ($EmitCharArray) {
    # Emit a char array which, while not as nice looking, doesn't violate
    # C99 length requirements about long string constants.
    my $total_len = $str_len + 1;
    my $array_name = "${VarName}_storage";
    $result .= "static const char " . $array_name . "[$total_len] = {\n";
    foreach my $line (@all_lines) {
      $result .= "  ";
      for (my $col = 0; $col < length($line); $col++) {
        my $char = substr $line, $col, 1;
        $result .= ord($char) . ",";
      }
      $result .= "\n";
    }
    $result .= "  0\n};\n";
    $result .= "const char *${VarName} = $array_name;\n";
  } else {
    $result .= "const char *${VarName} = \n";
    foreach my $line (@all_lines) {
      my $out = $line;  # make a copy ($line is an alias)
      chomp $out;
      $out =~ s/\\/\\\\/g;
      $out =~ s/\"/\\\"/g;
      $out =~ s/\t/\\t/g;
      $result .= "\"${out}\\n\"\n";
    }
    $result .= ";\n";
  }
  print $result;
}


