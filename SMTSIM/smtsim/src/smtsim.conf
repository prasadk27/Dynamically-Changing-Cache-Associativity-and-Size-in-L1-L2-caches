// -*- Mode: C++ -*-
// vim: set filetype=c:
//
// SMTSIM default configuration file -- the configuration options here 
// control much of the simulator's behavior.  These options get compiled-in to
// the simulator as defaults, but may be overridden at startup. 
//
// The simulator starts out with the compiled-in default configuration, then
// loads the file "smtsim.conf" if it exists in the current directory at 
// startup, and then processes any "-conffile" / "-confexpr" options from the 
// user in order.
//
// This file describes a tree of name-value pairs, where only the values have
// types.  It is a list of assignment statements, assigning values to names.
// Values can themselves be (sub)trees.  Both C++-style and nested C-style
// comments are allowed.  Names may be used in place of values, to copy a
// value from one name to another.
//
// There are six types of values:
//   {...} -- tree values.  "..." represents zero or more assignments.
//   "foo" -- quoted strings.  Escape sequences supported are \\, \", \n, and
//            \xHH where 'H's are hex digits.  Consecutive string literals are
//            automatically concatenated.
//   21    -- integers, with an optional leading sign
//   3.0e2 -- C-style floating-point numbers (also used for "i64" values)
//   t / f -- true or false, Boolean values.
//   0xf00d -- byte sequences.  The start of the sequence is denoted "0x",
//             and is followed by zero or more pairs of hex digits, each 
//             encoding a byte.  There may be whitespace between the bytes;
//             "0x", "0x00", and "0x f0 0d " are all legal.
//
// Ordered lists of values may be entered with square braces; this will result
// in a tree value with automatically-assigned keys:
//   [ V1, V2 ] is equivalent to { _0 = V1; _1 = V2; size = 2; }
//
// Sets of keys may be entered by omitting operator/values after keys; values
// will default to boolean true in this case:
//   { K1; K2; } is equivalent to { K1 = t; K2 = t; }
//
// There are four assignment operators:
//   N = V    -- assign: set N to V, discarding any old value of N
//   N ?= V   -- weak assign: set N to V if N is not already defined
//   N |= V   -- overlay: overlay the tree value V onto N.  Any existing tree
//               structures must match; any non-tree name/value pairs in V are
//               copied into N.
//   N ?|= V  -- weak overlay: like overlay, but don't overwrite things which 
//               are already defined in N.
//
// (When writing new tree-values, only the first assignment operator makes
// sense; it's not really assigning anything, just syntactically denoting.
// The additional operators can be useful when referring to existing values.)
//
// Names are C-style identifiers, with the addition of the characters "." and
// "/" to support navigating of existing trees somewhat like a unix
// filesystem.  "t" and "f" shouldn't be used as names.  Names and "directory"
// components used as lvalues are automatically created if they don't exist.
// Quoted strings may be used as names; any embedded front-slashes will still
// be treated as path separators.  (Iff a name has an unquoted C-style
// representation, its equivalent to the quoted-string version.)
// 
// JAB
// $Id: smtsim.conf,v 1.15.6.97.2.3.2.62.2.1 2009/12/25 06:31:51 jbrown Exp $
// 

// Note: (cache bytes / cache assoc) must be a power of two
// Note: cache_block_bytes, page_bytes, must be powers of two

// Global options: these affect things outside of all cores, or common to
// all cores.
Global = {
    // Set thread_length to 0, to ignore it and allinstructions as limits
    thread_length = 500e2;      // Note: double, not an int! (must fit in i64)
    //allinstructions = 500e6;  // Overrides thread_length value if set
    num_contexts = 1;
    num_cores = 1;
    nice_level = 19;
    disable_coredump = t;
    reap_alist_at_squash = t;             // Recover SQUASHED insts immediately
    abort_on_alist_full = reap_alist_at_squash; // (should preclude alist-full)

    ThreadCoreMap = {           // (This refers to hardware thread contexts)
        policy = "smt";
        // t4 = 0;              // Example: force context #4 to exist on core 0
    };
    Mem = {
        cache_request_holders = 256;
        cache_block_bytes = 64;
        page_bytes = 8192;
        inst_bytes = 4;
        split_bus = f;          // Split bus into request/reply channels
        bus_request_time = { latency = 1; interval = 1; };      // req only
        bus_transfer_time = { latency = 4; interval = 2; };     // w/data
        stack_initial_kb = 64;
        stack_max_kb = 65536;

        // private_l2caches specifies that all L2s become private (1 per core),
        // with the inter-core interconnect moved from just below L1, to just
        // below L2.  This was poorly-but-expediently implemented with many
        // run-time tests of this flag.
        private_l2caches = f;
        L2Cache = {
            // When "private_l2caches" set, these global params are still used
            // to provide default values for any cores missing L2Cache
            // parameters
            size_kb = 512;
            assoc = 2;
            n_banks = 8;
            wb_buffer_size = 16;
            replace_policy = "LRU";
            ports = { r = 0; w = 0; rw = 1; };
            access_time = { latency = 4; interval = 2; };
            access_time_wb = { latency = 4; interval = 2; };
            fill_time = access_time_wb;
            miss_penalty = 0;
            track_coher_misses = t;
            prefetch_nextblock = f;     // not yet implemented at L2
        };

        use_l3cache = t;
        L3Cache = {
            size_kb = 4096;
            assoc = 2;
            n_banks = 8;
            wb_buffer_size = 16;
            replace_policy = "LRU";
            ports = { r = 0; w = 0; rw = 1; };
            access_time = { latency = 20; interval = 8; };
            access_time_wb = { latency = 20; interval = 8; };
            fill_time = access_time_wb;
            miss_penalty = 0;
            prefetch_nextblock = f;     // not yet implemented at L3
        };

        MainMem = {
            n_banks = 16;
            read_time = { latency = 400; interval = 100; };
            write_time = read_time;
        };

        use_coherence = f;
        Coher = {
            // Semi-magically notify the coherence manager when a core evicts
            // its last copy of a given block.  (Without this, the number of
            // entries can grow to cover the entire address space of all
            // applications; this can drastically slow down the coherence
            // mgr. hash table ops.)
            apply_evict_notifies = t;
            // Prefer to ask a neighbor for shared data, before going down to
            // memory.  (Currently, this chooses one sharer at random.)
            prefer_neighbor_shared = t;
        };
    };
};


// Core options: these set the defaults for things which can be changed 
// per-core.  Overrides for individual cores may be set in "Core_N" for
// core #N.  For example, to force core 0's I-cache associativity to 1:
// Core_0/ICache/assoc = 1;
Core = {
    itlb_entries = 48;
    dtlb_entries = 128;
    tlb_miss_penalty = 160;
    // Keep invalid addresses out of TLBs.  (Their presence is an
    // artefact of our very simple TLB miss modeling.)
    tlb_filter_invalid = t;
    btb_entries= 256;
    btb_assoc = 4;
    pht_entries = 2048;
    br_bias_entries = 2048;
    loadstore_queue_size = 16;
    TraceCache = {
        n_entries = 2048;
        assoc = 4;
        block_insts = 8;
        pred_per_block = 3;
        is_path_assoc = t;
        trim_partial_hits = f;      // AKA !inactive issue
    };
    TraceFillUnit = {
        output_fifo_len = 10;
        output_interval = 1;
        align_to_bblock = t;        // AKA !trace packing
        branch_promote_thresh = 64;
        allow_indirect_jumps = t;
    };
    MultiBranchPredictor = {
        n_rows = 2048;
        predict_width = 3;
    };
    DataMSHR = {
        entry_count = 16;       // max # outstanding "producers" (cache reqs)
        waiters_per_entry = 32; // max waiting "consumers" (ld/st/etc) per ent
        max_alloc_per_cyc = 4;  // -1: unlimited
    };
    InstMSHR = {
        entry_count = 16;
        waiters_per_entry = 32;
        max_alloc_per_cyc = 4;
    };
    L2MSHR = {   // Always parsed, but only used if private_l2caches is set
        entry_count = 32;
        waiters_per_entry = 4;  // (currently only 1 waiter/ent for private L2)
        max_alloc_per_cyc = 4;
    };
    ICache = {
        size_kb = 64;
        assoc = 2;
        n_banks = 8;
        wb_buffer_size = 16;     // (still used for coherence acks)
        replace_policy = "LRU";
        ports = { r = 0; w = 0; rw = 1; };
        access_time = { latency = 1; interval = latency; };
        access_time_wb = { latency = 2; interval = latency; };
        fill_time = access_time_wb;
        miss_penalty = 0;
        prefetch_nextblock = f;
    };
    DCache = {
        size_kb = 64;
        assoc = 2;
        n_banks = 8;
        wb_buffer_size = 16;
        replace_policy = "LRU";
        ports = { r = 0; w = 0; rw = 1; };
        access_time = { latency = 1; interval = latency; };
        access_time_wb = { latency = 2; interval = latency; };
        fill_time = access_time_wb;
        miss_penalty = 0;
        track_coher_misses = t;
        prefetch_nextblock = f;
    };
    DataStreambuf = {
        enable = f;
        // important structural parameters
        n_streams = 8;
        blocks_per_stream = 4;
        stride_pc_entries = 256;
        stride_pc_assoc = 4;
        // various policy knobs, etc. (see StreambufConf)
        always_free_on_match = t;
        prefetch_as_exclusive = t;
        prefetch_only_when_quiet = t;
        force_no_overlap = t;
        use_two_miss_alloc_filter = f;
        use_round_robin_sched = f;
        stream_priority_age_allocs = 10;
        predict_match_saturate = 8;             // counter limit [0...n-1)
        predict_miss_saturate = 8;
        stream_priority_saturate = 13;
        alloc_min_confidence_thresh = 1;        // (0 == half of saturate)
    };
    DataDeadBlock = {           // Dead-block predictor
        enable = f;
        hist_width = 32;        // width of PC-trace signatures
        hist_update_at_commit = f;      // update hist at commit, not exec
        // dead-block-table (signature -> prediction) parameters
        dead_block_entries = 1024;
        dead_block_assoc = 8;
    };
    L2Cache = {   // Checked only if private_l2caches is set; overrides Global
    };
    Fetch = {
        // number of instructions that can be fetched in a single cycle by a
        // single thread.
        single_limit = 8;
        // number of total instructions that can be fetched in a single cycle
        total_limit = 8;
        // number of threads that can fetch in a single cycle
        thread_count_limit = 2;
        n_stages = 1;
        enable_trace_cache = f;
        tcache_skips_to_rename = f;
    };
    Decode = {
        n_stages = 1;
    };
    Rename = {
        // physical_regs = rename_regs + (contexts * arch_regs)
        int_rename_regs = 100;
        float_rename_regs = 100;
        n_stages = 1;
    };
    Queue = {
        int_queue_size = 64;
        float_queue_size = 64;
        int_ooo_issue = t;
        float_ooo_issue = t;
        max_int_issue = 6;
        max_float_issue = 3;
        // load/store instructions are a subset of the int issue bandwidth.
        max_ldst_issue = 4;
        max_sync_issue = 2;
    };
    RegRead = {
        n_stages = 1;
    };
    RegWrite = {
        n_stages = 1;
    };
    Commit = {
        // number of instructions that can be retired in a single cycle by a
        // single thread.
        single_limit = 8;
        // number of total instructions that can be retired in a single cycle
        total_limit = 8;
        // number of threads that can retire insts in a single cycle
        thread_count_limit = 2;
    };
    ExecTime = {
        all_extra = 0;
        int_arith = 1;
        int_load = 1;
        int_store = 1;
        int_compare = 0;
        int_condmove = 2;
        int_condbr = int_arith;
        int_mull = 8;
        int_mulq = 16;
        int_umulh = int_mulq;
        fp_arith = 4;
        fp_bit = fp_arith;
        fp_load = int_load;
        fp_store = int_store;
        fp_compare = fp_arith;
        fp_condmove = fp_bit;
        fp_condbr = int_condbr;
        fp_divs = 17;               // Also sqrts
        fp_divt = 30;               // Also sqrtt
        uncond_br = 2;
        ftoi = 2;
        itof = 2;
        smt_lockrel = 1;
        smt_fork = 1;
        smt_terminate = 4;
    };
};


// Thread options (hardware thread contexts): these set the defaults for
// things which can be changed per-thread.  Overrides for individual threads
// may be set in "Thread_N" for thread #N.  For example, to force thread 0's
// active-list size to 256: Thread_0/active_list_size = 256;
Thread = {
    reorder_buffer_size = 256;
    retstack_entries = 12;
    discard_static_noops = t;

    // This "active list" size doesn't directly correspond to the size of a
    // physical structure in a processor; it's for simulator memory management.
    // In some sense, it's the size of the reorder buffer, plus the total size
    // of all instruction-holding latches in pre-rename stages.  If
    // "reap_alist_at_squash" is false, entries are also used to hold
    // no-longer-existent squashed instructions for some length of time, where
    // they may falsely block fetch and/or consume commit bandwidth.
    active_list_size = 512;       // rule of thumb: 2 * reorder_buffer_size
};

ResourcePooling = {
    enable = f;
    share_all = f; // Overwrites the rest
    // Active only when share_all = f;
    share_lsq = t;
    share_rob = t;
    share_iq = t;
    share_fq = t;
    share_iregs = t;
    share_fregs = t;

    order_policy  = "FIXED";     // ["FIXED","RROBIN"]
    limit_policy  = "LIMIT75";   // ["NOLIMIT", "LIMIT90","LIMIT80"]
};


// Simulator-wide stuff related to syscall emulation, but not necessarily tied
// to a particular workload.
Syscall = {
    report_resize_failures = t;

    // ForceUniqueNames: a set of filenames to force to be unique, by adding a
    // host.pid.masterid prefix, to avoid conflicts in parallel simulations.
    // If present, names are taken as bools; if true, translation is done.
    // Currently, the test isn't very smart: just a case-sensitive string
    // match on the last component of a path (chars following the last "/", or
    // entire string if no "/").  This may need to evolve at some point to
    // more advanced path-rewriting.
    // This was a problem with "sixtrack" in SPEC2000.
    ForceUniqueNames = {
        // "foo";     // edit ".../foo" to ".../uniq.<prefix>_foo"
    };

    // Place all "uniquified" paths in their own subdir.  Not strictly
    // necessary for correctness, but those files can really proliferate;
    // also, constantly adding to the benchmark working dir may eventually
    // alter getdirentries syscall behavior.
    uniquify_to_subdir = t;

    // Force syscalls to treat the simulator's initial working dir as the root
    // of the emulated filesystem.  This is weak form of sandboxing, but
    // serves to keep random benchmarks from crawling up and listing random
    // parent directories, which tends to cause non-repeatable results across
    // machines.
    root_paths_at_cwd = f;

    // Take pains to hide simulation-host-specific device information which
    // would otherwise get translated through syscalls (e.g. "atime" values
    // from fstat).  This should help consistency across platforms, as well as
    // on a single platform across directories, invocations, etc.
    sanitize_host_device_info = t;
};



// Optional debugging stuff: this may or may not be ignored if DEBUG support 
// isn't compiled in.
Debug = {
  // cycle = 1e5;        // turn on debug at a specific cycle
  //  commit_num = 1e6;   // turn on debug at a specific commit# (any thread)
    //  syscall = 21.;      // turn on debug at a given syscall# (any thread)
    //  progress = t;       // show periodic progress messages
    //  show_stages = t;    // show the contents of pipe stages each cycle
    //  exit_cycle = 1e9;   // exit at the start of a particular cycle
    //  disable_ff = t;     // disable fast-forward, regardless of distance
    //  ff_forever = t;     // force fast-forward distances to I64_MAX
};

AppStatsLog = {
    // Lazy: these three aren't part of the AppStatsLog object's properties
    enable = f;
    base_name = "app_stats";
    interval = 10e3;

    stat_mask = {
        all = f;                // all: log all stats, override following flags
        cyc = f;
        sched_cyc = f;
        sched_count = f;
        commits = f;
        mem_commits = f;
        app_insts_committed = f;
        long_mem_detects = f;
        long_mem_flushes = f;
        itlb_hr = f;
        dtlb_hr = f;
        icache_hr = f;
        dcache_hr = f;
        l2cache_hr = f;
        l3cache_hr = f;
        bpred_hr = f;
        retpred_hr = f;
        mem_delay = f;
        iq_conf = f;
        icache_blocks = f;
        dcache_blocks = f;
        l2cache_blocks = f;
        l3cache_blocks = f;
        itlb_acc = f;
        dtlb_acc = f;
        icache_acc = f;
        dcache_acc = f;
        l2cache_acc = f;
        l3cache_acc = f;
        bpred_acc = f;
        fpalu_acc = f;
        intalu_acc = f;
        ldst_acc = f;
        lsq_acc = f;
        iq_acc = f;
        fq_acc = f;
        ireg_acc = f;
        freg_acc = f;
        iren_acc = f;
        fren_acc = f;
        rob_acc = f;
        lsq_occ = f;
        iq_occ = f;
        fq_occ = f;
        ireg_occ = f;
        freg_occ = f;
        iren_occ = f;
        fren_occ = f;
        rob_occ = f;
    };
};

GlobalCtxSchedLog = {
    //    name = "ctx_sched";       // Log context schedule events to this file
};

GlobalLongMemLog = {
    //    name = "long_mem";        // Long long-memory events to this file
};

// For the generation of the block vector
BasicBlockTracker = {
  create_bbv_file = f;
  filename = "";
  interval = 2e8;
};

// Temporary values for experimenting with load-flushing & app scheduling
//
// (Note, 20091118: this seems to have grown to be much less "temporary"
// than when first created.  These affect little bits of code spread all
// around the simulator.)
Hacking = {

    // Long-load detection and flushing
    long_mem_cyc = 25;          // 0: disable detection
    long_mem_at_commit = t;     // Only match long mem ops blocking commit
    flush_past_long_loads = f;
    flush_past_long_stores = f;
    inhibit_solo_flush = t;     // Don't flush ld/st when alone on a core
    consider_late_flush = f;    // Flush solo ld/st when adding to a core

    // Limit study stuff
    perfect_branch_pred = f;    // For non-tracecache branch target+directions
    perfect_tlbs = f;

    // stuff in app-mgr.cc
    print_appmgr_stats = t;
    thread_swapout_cyc = 20;
    thread_swapin_cyc = 20;
    sched_app = "OldestApp";
    sched_ctx = "FirstIdle";
    swap = "IfProcFull";
    swap_suppress_guess = f;    // don't swap if we guess we'd come right back
    csched_deduct_nonrun = t;   // count stalled contexts as "idle" for sched.
    swapgate_deduct_nonrun = t;
    swapgate_deduct_swapout = f;
    inst_spill_fill = t;
    inst_spill_fill_early = f;
    min_swapin_commits = 1.;    // min commits after swapin, to allow a swapout
    min_swapin_cyc = 0.;        // min #cyc after swapin, to allow a swapout
    spill_dirty_only = f;       // when swapping out, only spill modified regs
    spill_ghr = f;              // include the GHR in data spill/filled
    spill_retstack_size = 0;    // include at most these RS entries; 0=none
    spill_dtlb_size = 0;        // spill these many recent DTLB entries
    spill_dtlb_missonly = f;    // spill only recent misses (fills)

    StaticSched/allow_missing_apps = f;
    StaticAffin/force_sched = f;

    MutableMap = {
        // A0 = 1;      // Example: app 0 on core 1, in initial schedule
        // (Reading stops at first not-present app; use core -1 for unsched.)
    };

    L1MSHRPartition = {
        // last-minute ASPLOS hack; applies at L1 only (Inst + Data MSHRs)
        enable = f;
        max_prefetch_producers = 12;
    };
};

Workloads = {
    // Information about each workload which may be run is stored here, one
    // subtree per entry.  Each entry at minimum corresponds to the stuff
    // you'd find in an smtsim arg-file.  A workload being described here is
    // necessary but not sufficient for its execution; there also needs to be
    // a corresponding job in "WorkQueue/Jobs".
    //
    // Note that workloads can inherit values from other workloads, using the
    // "inherit" mechanism shown below.  The inheritance expansion is done
    // when each workload is started, not when the configuration is being
    // loaded.

    // my_galgel_1 = {
    //     argv = [ "galgel" ];
    //     ff_dist = 3.91e8;
    //     n_threads = 1;
    //     stdin = "galgel.in";
    //     stdout = "galgel.out";
    // };
    // my_galgel_2 = {
    //     inherit = [ "my_galgel_1" ]; // Copy values from my_galgel_1
    //     ff_dist = 2e3;               // Override fast-forward distance
    //     commit_count = 20.;  // Stop (shortly) after this many commits
    //     inst_count = 2010.;  // Stop after N emulate steps (test at commit)
    // };    
};

// If you want simulation to continue until all scheduled WorkQueue jobs are
// finished, be sure to set Global/thread_length to 0.
//
// Global/thread_length = 0.;

WorkQueue = {
    // This controls which of the known workloads are run, and when.
    enable = t;
    verbose_sched = t;                  // report job scheduling actions
    exit_on_app_exit = t;               // exit (status 1) if any app exits
    max_running_jobs = -1;              // if >=0, limit # of active jobs
    Jobs = {
        // gg_job_2 = {
        //     start_time = 10.;        // negative: never start
        //     workload = "my_galgel_2";
        // };
    };
};


GlobalMemProfiler = {
    enable = f;
    log_dstream = t;            // Include load/store data stream
    log_istream = t;            // Include instruction fetch stream
    log_at_commit = t;          // Log as instructions are committed
    log_name = "memprof.gz";
};
